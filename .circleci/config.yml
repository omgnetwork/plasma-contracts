# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

executors:
  truffle_executor:
    docker:
      - image: circleci/node:10.20
  python_executor:
    docker:
      - image: circleci/python:3.7.7

commands:
  setup_truffle_env:
    steps:
      - checkout
      - run:
          name: Set up environment
          command: echo 'export PATH="$(npm bin):$PATH"' >> $BASH_ENV
      - restore_cache:
          keys:
            - dependencies-v1-{{ checksum "~/repo/plasma_framework/package-lock.json" }}
      - run:
          name: Install dependencies
          working_directory: ~/repo/plasma_framework
          command: |
            npm install
            find node_modules -name .git | xargs rm -fr  # workaround for a problem with git dependencies
      - save_cache:
          key: dependencies-v1-{{ checksum "~/repo/plasma_framework/package-lock.json" }}
          paths:
            - ~/repo/plasma_framework/node_modules

  setup_python_env:
    steps:
      - checkout
      - run:
          name: Change dependencies directories ownership
          command: |
            sudo chown -R circleci:circleci /usr/local/bin /usr/local/lib
      - restore_cache:
          keys:
            - dependencies-v1-{{ checksum "~/repo/plasma_framework/python_tests/requirements.txt" }}
      - run:
          name: Prepare environment
          command: |
            sudo apt update && sudo apt install nodejs npm
            sudo npm install -g n && sudo n stable
            sudo npm install -g ganache-cli
            python3 -m venv ~/venv
      - run:
          name: Install dependencies
          working_directory: ~/repo/plasma_framework/python_tests
          command: |
            . ~/venv/bin/activate
            make init dev
            python -m solcx.install v0.5.11
      - save_cache:
          key: dependencies-v1-{{ checksum "~/repo/plasma_framework/python_tests/requirements.txt" }}
          paths:
            - ~/venv
            - /usr/local/bin
            - /usr/local/lib/node_modules

jobs:
  Deploy with Vault using docker-compose:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/repo
    steps:
      - checkout
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud auth configure-docker --quiet
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Setup data dir
          command: |
            mkdir -p MultiSigWalletOverride/docker/immutability/config/
            sudo chown -R 100:1000 MultiSigWalletOverride/docker/immutability/config/ && sudo chmod -R 777 MultiSigWalletOverride/docker/immutability/config/
      - run:
          name: Start services
          command: docker-compose up -d
          working_directory: ~/repo/MultiSigWalletOverride
      - run: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Install node 9
          command: |
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
            nvm install v9
            node --version
            nvm alias default v9
            echo 'export PATH="$(npm bin):$PATH"' >> $BASH_ENV
      - run:
          name: Pull Submodules
          command: |
            git submodule init
            git submodule update --remote
          working_directory: ~/repo/
      - run:
          name: Apply Overrides
          command: make init_multisig
          working_directory: ~/repo/MultiSigWalletOverride
      # node symlink missing if there's not nodejs-legacy
      - run: sudo apt-get update && sudo apt-get install -y build-essential libhidapi-dev libudev-dev libusb-1.0-0 libusb-1.0-0-dev nodejs-legacy
      - run:
          name: Deploy Gnosis MultiSigWalet
          command: |
            npm install
            npx truffle migrate --accounts 0xa508dD875f10C33C52a8abb20E16fc68E981F186 --confirmations 1
          working_directory: ~/repo/MultiSigWallet
      - run:
          name: Install node 12
          command: |
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
            nvm install v12
            node --version
            nvm alias default v12
            echo 'export PATH="$(npm bin):$PATH"' >> $BASH_ENV
      - restore_cache:
          keys:
            - dependencies-machine-v1-{{ checksum "~/repo/plasma_framework/package-lock.json" }}
      - run:
          name: Install dependencies
          working_directory: ~/repo/plasma_framework
          command: |
            npm version
            node --version
            npm install
      - save_cache:
          key: dependencies-machine-v1-{{ checksum "~/repo/plasma_framework/package-lock.json" }}
          paths:
            - ~/repo/plasma_framework/node_modules
      - run:
          name: Docker logs
          working_directory: ~/repo/MultiSigWalletOverride
          background: true
          command: |
            docker-compose logs -f
      - run:
          name: Deploy Plasma Contracts
          working_directory: ~/repo/plasma_framework
          command: |
            export VAULT_TOKEN=$(cat ../MultiSigWalletOverride/docker/immutability/config/unseal.json | jq -r .root_token)
            npx truffle migrate --network local
          environment:
            VAULT: "true"
            VAULT_ADDR: https://127.0.0.1:8200
            NODE_TLS_REJECT_UNAUTHORIZED: 0
            VAULT_RPC_REMOTE_URL: http://ganache:8545
      - run:
          name: Has the deployment succeeded?
          command: |
            # "startStandardExitBondSize()" |> ABI.encode([]) |> ExPlasma.Encoding.to_hex()
            export PEG=$(cat plasma_framework/build/outputs.json | jq -r .payment_exit_game)
            response=$(curl -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method": "eth_call", "params": [{"from": "0xd6858A28aA07A1cd8cA285443e80E2b0A031d50d", "to": "'"$PEG"'", "data": "0xfe32a124"}, "latest"], "id": 8}' http://127.0.0.1:8545)
            echo $response | jq -r '.'
            echo $response | ( ! grep "error" )
            echo $response | ( ! grep "0x0000000000000000000000000000000000000000000000000000000000000000" )

  Truffle tests:
    executor: truffle_executor
    working_directory: ~/repo
    steps:
      - setup_truffle_env
      - run:
          name: truffle version
          command: npx truffle version
          working_directory: ~/repo/plasma_framework
      - run:
          name: Run tests
          command: npm run test
          working_directory: ~/repo/plasma_framework
          environment:
            CI: true
            MOCHA_REPORTER: eth-gas-reporter
      - run:
          name: Show gas report
          command: |
            # Somehow the file output format is best read in shell
            cat ~/repo/plasma_framework/gasReport.rst
      # Temporarily disable codechecks as they are currently having issues (2021-03-16)
      # - run:
      #     name: Codechecks for gas usage
      #     command: |
      #       # Don't submit gas report for forks or private mirror
      #       [[ -z "${CC_SECRET}" ]] || npx codechecks
          working_directory: ~/repo/plasma_framework
      - store_artifacts:
          path: ~/repo/plasma_framework/gasReporterOutput.json
      - store_artifacts:
          path: ~/repo/plasma_framework/gasReport.rst

  Solidity coverage:
    executor: truffle_executor
    working_directory: ~/repo
    steps:
      - setup_truffle_env
      - run:
          name: Run solidity coverage
          command: |
            # Don't submit coverage report for forks, but let the build succeed
            if [[ -z "$COVERALLS_REPO_TOKEN" ]]; then
              npm run coverage
            else
              npm run coverage && cat coverage/lcov.info | coveralls
            fi
          working_directory: ~/repo/plasma_framework
      - store_artifacts:
          path: ~/repo/plasma_framework/coverage
      - store_artifacts:
          path: ~/repo/plasma_framework/coverage.json

  Javascript linter:
    executor: truffle_executor
    working_directory: ~/repo
    steps:
      - setup_truffle_env
      - run:
          name: Run javascript linter
          command: eslint .
          working_directory: ~/repo/plasma_framework

  Solidity linter:
    executor: truffle_executor
    working_directory: ~/repo
    steps:
      - setup_truffle_env
      - run:
          name: Run solidity linter
          command: npm run linter-sol
          working_directory: ~/repo/plasma_framework

  Python tests:
    executor: python_executor
    working_directory: ~/repo
    steps:
      - setup_python_env
      - run:
          name: Run tests
          working_directory: ~/repo/plasma_framework/python_tests
          command: |
            . ~/venv/bin/activate
            make test

  Python linter:
    executor: python_executor
    working_directory: ~/repo
    steps:
      - setup_python_env
      - run:
          name: Run linter
          working_directory: ~/repo/plasma_framework/python_tests
          command: |
            . ~/venv/bin/activate
            make lint

  Python long running tests:
    executor: python_executor
    working_directory: ~/repo
    steps:
      - setup_python_env
      - run:
          name: Run slow tests
          working_directory: ~/repo/plasma_framework/python_tests
          no_output_timeout: 5h # Circl CI limits to 5hr max: https://discuss.circleci.com/t/job-times-out-after-5-hours/32220/3
          command: |
            . ~/venv/bin/activate
            make runslow

  Deploy to Rinkeby with Gnosis and Vault:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Pull Submodules
          command: |
            git submodule init
            git submodule update --remote
          working_directory: ~/repo/
      - run:
          name: Apply Overrides
          command: make init_multisig
          working_directory: ~/repo/MultiSigWalletOverride
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud -q auth configure-docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Build docker
          command: |
            docker build -t omisego/plasma-contracts . --build-arg VAULT=true
      - run:
          name: Start services
          command: |
            sudo chmod -R 777 docker/immutability/config/
            docker-compose up -d vault_server
          working_directory: ~/repo/MultiSigWalletOverride
      - run:
          name: "Switch to Python v3.7"
          command: |
            pyenv versions
            pyenv global 3.7.0
      - run:
          name: Deploy Gnosis Multisig to Rinkeby
          no_output_timeout: 1h
          command: |
            docker run --rm \
            -v /tmp:/home/plasma-contracts/MultiSigWallet/build \
            -e DEPLOYER_PRIVATEKEY=${FAUCET_PRIV_KEY} \
            -e REMOTE_URL="https://white-red-brook.rinkeby.quiknode.pro/${QUIKNODE_API_TOKEN}"/ \
            -w /home/plasma-contracts/MultiSigWallet \
            omisego/plasma-contracts \
            npx truffle migrate --accounts ${FAUCET_ADDRESS} --confirmations 1 \
            --network remote
      - run:
          name: Directory setup
          command: |
            mkdir /tmp/plasma_framework_output/
            sudo chmod -R 777 /tmp/plasma_framework_output/
      - run:
          name: Deploy Plasma contracts to Rinkeby
          no_output_timeout: 1h
          command: |
            # if you see Error:PollingBlockTracker, use WSS or RPC interchangeably
            # -e REMOTE_URL="https://rinkeby.infura.io/v3/${INFURA_API_TOKEN}"
            # -e REMOTE_URL="wss://rinkeby.infura.io/ws/v3/${INFURA_API_TOKEN}"
            # -e REMOTE_URL="https://api.zmok.io/testnet/${ZMOK_API_TOKEN}"
            # -e REMOTE_URL="https://eth-rinkeby.alchemyapi.io/v2/${ALCHEMY_API_TOKEN}"
            # -e REMOTE_URL="https://white-red-brook.rinkeby.quiknode.pro/${QUIKNODE_API_TOKEN}/"
            docker run --rm \
            -v /tmp:/home/plasma-contracts/MultiSigWallet/build \
            -v /tmp/plasma_framework_output:/home/plasma-contracts/plasma_framework/build \
            -w /home/plasma-contracts/plasma_framework \
            --network=multisigwalletoverride_default \
            -e VAULT=true \
            -e VAULT_ADDR=https://vault_server:8200 \
            -e VAULT_TOKEN=$(cat ~/repo/MultiSigWalletOverride/docker/immutability/config/unseal.json | jq -r .root_token) \
            -e NODE_TLS_REJECT_UNAUTHORIZED=0 \
            -e VAULT_RPC_REMOTE_URL="https://white-red-brook.rinkeby.quiknode.pro/${QUIKNODE_API_TOKEN}/" \
            -e DEPLOYER_PRIVATEKEY=${FAUCET_PRIV_KEY} \
            -e REMOTE_URL="wss://rinkeby.infura.io/ws/v3/${INFURA_API_TOKEN}" \
            omisego/plasma-contracts \
            /bin/sh -c "npx truffle migrate --reset --network remote && echo "Copy outputs.json" && cp /home/plasma-contracts/plasma_framework/build/outputs.json /tmp/plasma_framework_output"
      - run:
          name: Check faucet balance
          command: |
            python .circleci/scripts/check_faucet_balance_and_warn.py
      - run:
          name: Block submission works?
          command: |
            ls /tmp/plasma_framework_output

            ls /tmp/
            export VAULT_TOKEN=$(cat ~/repo/MultiSigWalletOverride/docker/immutability/config/unseal.json | jq -r .root_token)
            export WALLET_NAME=plasma-deployer
            export AA=$(cat /tmp/plasma_framework_output/outputs.json | jq -r .authority_address)
            export PF=$(cat /tmp/plasma_framework_output/outputs.json | jq -r .plasma_framework)
            curl --insecure -H "X-Vault-Request: true" -H 'X-Vault-Token: "'"$VAULT_TOKEN"'"' --data '{"block_root":"KW7c+YhqaeXzUSARcnOh0sBSWhAU7l144fF6ls0Y5Vw=", "nonce": 0, "gas_price": "37000000000", contract: "'"$PF"'"}' -X PUT https://127.0.0.1:8200/v1/immutability-eth-plugin/wallets/${WALLET_NAME}/accounts/${AA}/plasma/submitBlock
      - run:
          name: Has the deployment succeeded?
          command: |
            # "startStandardExitBondSize()" |> ABI.encode([]) |> ExPlasma.Encoding.to_hex()
            export PEG=$(cat /tmp/plasma_framework_output/outputs.json | jq -r .payment_exit_game)
            response=$(curl -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method": "eth_call", "params": [{"from": "0xd6858A28aA07A1cd8cA285443e80E2b0A031d50d", "to": "'"$PEG"'", "data": "0xfe32a124"}, "latest"], "id": 8}' https://rinkeby.infura.io/v3/${INFURA_API_TOKEN})
            echo $response | jq -r '.'
            echo $response | ( ! grep "error" )
            echo $response | ( ! grep "0x0000000000000000000000000000000000000000000000000000000000000000" )

  Deploy to Rinkeby:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: "Switch to Python v3.7"
          command: |
            pyenv versions
            pyenv global 3.7.0
      - run:
          name: Build docker
          command: |
            docker build -t omisego/plasma-contracts .
      - run:
          name: Deploy contract to Rinkeby
          no_output_timeout: 1h
          command: |
            docker run --rm \
            -e DEPLOYER_PRIVATEKEY=${FAUCET_PRIV_KEY} \
            -e MAINTAINER_PRIVATEKEY=${FAUCET_PRIV_KEY} \
            -e AUTHORITY_PRIVATEKEY=${FAUCET_PRIV_KEY} \
            -e REMOTE_URL="https://rinkeby.infura.io/v3/${INFURA_API_TOKEN}" \
            omisego/plasma-contracts \
            npx truffle migrate --reset \
            --network remote
      - run:
          name: Check faucet balance
          command: |
            python .circleci/scripts/check_faucet_balance_and_warn.py

workflows:
  version: 2
  Run python tests:
    jobs:
      - Python tests
      - Python linter

  Run truffle tests:
    jobs:
      - Truffle tests
      - Solidity coverage
      - Javascript linter
      - Solidity linter
  Other:
    jobs:
      - Deploy with Vault using docker-compose
  Run python slow tests:
    jobs:
      - Python long running tests
    triggers:
      - schedule:
          cron: "0 0 * * 1" # run job every monday at midnight
          filters:
            branches:
              only:
                - v2.0.0

  Deployment checks:
    jobs:
      - Deploy to Rinkeby:
          filters:
            branches:
              only:
                - v2.0.0
      - Deploy to Rinkeby with Gnosis and Vault
      # :
      #     requires:
      #       - Deploy to Rinkeby
      #     filters:
      #       branches:
      #         only:
      #           - v2.0.0
